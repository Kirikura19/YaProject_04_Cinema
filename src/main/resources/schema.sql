-- Создание таблицы User
CREATE TABLE IF NOT EXISTS "User" (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) UNIQUE,
    login VARCHAR(255) NOT NULL,
    name VARCHAR(255),
    birthday DATE NOT NULL,
    CONSTRAINT valid_email CHECK (position('@' IN email) > 0 AND position('.' IN email) > position('@' IN email)), -- Проверка формата email
    CONSTRAINT valid_birthday CHECK (birthday <= CURRENT_DATE), -- Проверка на дату рождения, которая не наступила
    CONSTRAINT min_login_length CHECK (LENGTH(login) >= 6) -- Минимальная длина логина
    );

CREATE TABLE IF NOT EXISTS User_Friendship_Status (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255)
    );

CREATE TABLE IF NOT EXISTS User_Friendship (
    user_id1 INTEGER,
    user_id2 INTEGER,
    status_id INTEGER,
    PRIMARY KEY (user_id1, user_id2),
    FOREIGN KEY (user_id1) REFERENCES "User"(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id2) REFERENCES "User"(id) ON DELETE CASCADE,
    FOREIGN KEY (status_id) REFERENCES User_Friendship_Status(id)
    );

CREATE TABLE IF NOT EXISTS Genre (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(200)
    );

CREATE TABLE IF NOT EXISTS MPA (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(200)
    );

-- Создание таблицы Film
CREATE TABLE IF NOT EXISTS Film (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(200),
    release_date DATE NOT NULL,
    duration INTEGER CHECK (duration >= 1),
    genre_id INTEGER REFERENCES Genre (id),
    mpa_id INTEGER REFERENCES MPA (id)
    );

CREATE TABLE IF NOT EXISTS User_Like_Film (
    user_id INTEGER REFERENCES "User" (id) ON DELETE CASCADE,
    film_id INTEGER REFERENCES Film (id) ON DELETE CASCADE
    );

